
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026fc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002884  08002884  00003884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800289c  0800289c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  0800289c  0800289c  0000389c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028a4  080028a4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028a4  080028a4  000038a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028a8  080028a8  000038a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080028ac  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000074  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000080  20000080  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000065b1  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001226  00000000  00000000  0000a5ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  0000b818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000053e  00000000  00000000  0000bef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f360  00000000  00000000  0000c42e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008bd0  00000000  00000000  0002b78e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bed59  00000000  00000000  0003435e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f30b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001bc0  00000000  00000000  000f30fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000f4cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800286c 	.word	0x0800286c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800286c 	.word	0x0800286c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MPU6050_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MPU6050_Init(void) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af04      	add	r7, sp, #16
    uint8_t check;
    uint8_t Data;


    HAL_I2C_Mem_Read(&hi2c3, MPU6050_ADDRESS, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &check, 1, HAL_MAX_DELAY);
 80004be:	f04f 33ff 	mov.w	r3, #4294967295
 80004c2:	9302      	str	r3, [sp, #8]
 80004c4:	2301      	movs	r3, #1
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	1dfb      	adds	r3, r7, #7
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2301      	movs	r3, #1
 80004ce:	226b      	movs	r2, #107	@ 0x6b
 80004d0:	21d0      	movs	r1, #208	@ 0xd0
 80004d2:	480c      	ldr	r0, [pc, #48]	@ (8000504 <MPU6050_Init+0x4c>)
 80004d4:	f000 ff74 	bl	80013c0 <HAL_I2C_Mem_Read>
    if (check == 0x68) {
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	2b68      	cmp	r3, #104	@ 0x68
 80004dc:	d10e      	bne.n	80004fc <MPU6050_Init+0x44>

        Data = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDRESS, PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &Data, 1, HAL_MAX_DELAY);
 80004e2:	f04f 33ff 	mov.w	r3, #4294967295
 80004e6:	9302      	str	r3, [sp, #8]
 80004e8:	2301      	movs	r3, #1
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	1dbb      	adds	r3, r7, #6
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2301      	movs	r3, #1
 80004f2:	226b      	movs	r2, #107	@ 0x6b
 80004f4:	21d0      	movs	r1, #208	@ 0xd0
 80004f6:	4803      	ldr	r0, [pc, #12]	@ (8000504 <MPU6050_Init+0x4c>)
 80004f8:	f000 fe68 	bl	80011cc <HAL_I2C_Mem_Write>
    }
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000028 	.word	0x20000028

08000508 <MPU6050_Read_Gyroscope>:
void MPU6050_Read_Gyroscope(int16_t *gyro_x, int16_t *gyro_y, int16_t *gyro_z) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	@ 0x28
 800050c:	af04      	add	r7, sp, #16
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
    uint8_t data[6];
    HAL_I2C_Mem_Read(&hi2c3, MPU6050_ADDRESS, GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, data, 6, HAL_MAX_DELAY);
 8000514:	f04f 33ff 	mov.w	r3, #4294967295
 8000518:	9302      	str	r3, [sp, #8]
 800051a:	2306      	movs	r3, #6
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	2301      	movs	r3, #1
 8000526:	2243      	movs	r2, #67	@ 0x43
 8000528:	21d0      	movs	r1, #208	@ 0xd0
 800052a:	4811      	ldr	r0, [pc, #68]	@ (8000570 <MPU6050_Read_Gyroscope+0x68>)
 800052c:	f000 ff48 	bl	80013c0 <HAL_I2C_Mem_Read>

    *gyro_x = (int16_t)((data[0] << 8) | data[1]);
 8000530:	7c3b      	ldrb	r3, [r7, #16]
 8000532:	021b      	lsls	r3, r3, #8
 8000534:	b21a      	sxth	r2, r3
 8000536:	7c7b      	ldrb	r3, [r7, #17]
 8000538:	b21b      	sxth	r3, r3
 800053a:	4313      	orrs	r3, r2
 800053c:	b21a      	sxth	r2, r3
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	801a      	strh	r2, [r3, #0]
    *gyro_y = (int16_t)((data[2] << 8) | data[3]);
 8000542:	7cbb      	ldrb	r3, [r7, #18]
 8000544:	021b      	lsls	r3, r3, #8
 8000546:	b21a      	sxth	r2, r3
 8000548:	7cfb      	ldrb	r3, [r7, #19]
 800054a:	b21b      	sxth	r3, r3
 800054c:	4313      	orrs	r3, r2
 800054e:	b21a      	sxth	r2, r3
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	801a      	strh	r2, [r3, #0]
    *gyro_z = (int16_t)((data[4] << 8) | data[5]);
 8000554:	7d3b      	ldrb	r3, [r7, #20]
 8000556:	021b      	lsls	r3, r3, #8
 8000558:	b21a      	sxth	r2, r3
 800055a:	7d7b      	ldrb	r3, [r7, #21]
 800055c:	b21b      	sxth	r3, r3
 800055e:	4313      	orrs	r3, r2
 8000560:	b21a      	sxth	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	801a      	strh	r2, [r3, #0]
}
 8000566:	bf00      	nop
 8000568:	3718      	adds	r7, #24
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000028 	.word	0x20000028

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 f9cb 	bl	8000914 <HAL_Init>

  /* USER CODE BEGIN Init */

	MPU6050_Init();
 800057e:	f7ff ff9b 	bl	80004b8 <MPU6050_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f80f 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f899 	bl	80006bc <MX_GPIO_Init>
  MX_I2C3_Init();
 800058a:	f000 f869 	bl	8000660 <MX_I2C3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_Read_Gyroscope(&gyro_x, &gyro_y, &gyro_z);
 800058e:	1cba      	adds	r2, r7, #2
 8000590:	1d39      	adds	r1, r7, #4
 8000592:	1dbb      	adds	r3, r7, #6
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff ffb7 	bl	8000508 <MPU6050_Read_Gyroscope>
	  HAL_Delay(100);
 800059a:	2064      	movs	r0, #100	@ 0x64
 800059c:	f000 fa2c 	bl	80009f8 <HAL_Delay>
	  MPU6050_Read_Gyroscope(&gyro_x, &gyro_y, &gyro_z);
 80005a0:	bf00      	nop
 80005a2:	e7f4      	b.n	800058e <main+0x1a>

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	@ 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	@ 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 f92e 	bl	8002814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b22      	ldr	r3, [pc, #136]	@ (8000658 <SystemClock_Config+0xb4>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	4a21      	ldr	r2, [pc, #132]	@ (8000658 <SystemClock_Config+0xb4>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000658 <SystemClock_Config+0xb4>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b1c      	ldr	r3, [pc, #112]	@ (800065c <SystemClock_Config+0xb8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a1b      	ldr	r2, [pc, #108]	@ (800065c <SystemClock_Config+0xb8>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b19      	ldr	r3, [pc, #100]	@ (800065c <SystemClock_Config+0xb8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2310      	movs	r3, #16
 800060a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800060c:	2300      	movs	r3, #0
 800060e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fcb9 	bl	8001f8c <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000620:	f000 f874 	bl	800070c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f001 ff1c 	bl	800247c <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800064a:	f000 f85f 	bl	800070c <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3750      	adds	r7, #80	@ 0x50
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000664:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <MX_I2C3_Init+0x50>)
 8000666:	4a13      	ldr	r2, [pc, #76]	@ (80006b4 <MX_I2C3_Init+0x54>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800066a:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <MX_I2C3_Init+0x50>)
 800066c:	4a12      	ldr	r2, [pc, #72]	@ (80006b8 <MX_I2C3_Init+0x58>)
 800066e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <MX_I2C3_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000676:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <MX_I2C3_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067c:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <MX_I2C3_Init+0x50>)
 800067e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000682:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000684:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <MX_I2C3_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800068a:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <MX_I2C3_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000690:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <MX_I2C3_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000696:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <MX_I2C3_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800069c:	4804      	ldr	r0, [pc, #16]	@ (80006b0 <MX_I2C3_Init+0x50>)
 800069e:	f000 fc51 	bl	8000f44 <HAL_I2C_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80006a8:	f000 f830 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000028 	.word	0x20000028
 80006b4:	40005c00 	.word	0x40005c00
 80006b8:	000186a0 	.word	0x000186a0

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <MX_GPIO_Init+0x4c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000708 <MX_GPIO_Init+0x4c>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <MX_GPIO_Init+0x4c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_GPIO_Init+0x4c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	4a08      	ldr	r2, [pc, #32]	@ (8000708 <MX_GPIO_Init+0x4c>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_GPIO_Init+0x4c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800

0800070c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000710:	b672      	cpsid	i
}
 8000712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <Error_Handler+0x8>

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <HAL_MspInit+0x4c>)
 8000724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000726:	4a0f      	ldr	r2, [pc, #60]	@ (8000764 <HAL_MspInit+0x4c>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800072c:	6453      	str	r3, [r2, #68]	@ 0x44
 800072e:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <HAL_MspInit+0x4c>)
 8000730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <HAL_MspInit+0x4c>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000742:	4a08      	ldr	r2, [pc, #32]	@ (8000764 <HAL_MspInit+0x4c>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000748:	6413      	str	r3, [r2, #64]	@ 0x40
 800074a:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <HAL_MspInit+0x4c>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800

08000768 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	@ 0x28
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a29      	ldr	r2, [pc, #164]	@ (800082c <HAL_I2C_MspInit+0xc4>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d14b      	bne.n	8000822 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b28      	ldr	r3, [pc, #160]	@ (8000830 <HAL_I2C_MspInit+0xc8>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a27      	ldr	r2, [pc, #156]	@ (8000830 <HAL_I2C_MspInit+0xc8>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b25      	ldr	r3, [pc, #148]	@ (8000830 <HAL_I2C_MspInit+0xc8>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b21      	ldr	r3, [pc, #132]	@ (8000830 <HAL_I2C_MspInit+0xc8>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a20      	ldr	r2, [pc, #128]	@ (8000830 <HAL_I2C_MspInit+0xc8>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000830 <HAL_I2C_MspInit+0xc8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007c8:	2312      	movs	r3, #18
 80007ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80007d4:	2304      	movs	r3, #4
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	4815      	ldr	r0, [pc, #84]	@ (8000834 <HAL_I2C_MspInit+0xcc>)
 80007e0:	f000 fa14 	bl	8000c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ea:	2312      	movs	r3, #18
 80007ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80007f6:	2304      	movs	r3, #4
 80007f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	480d      	ldr	r0, [pc, #52]	@ (8000838 <HAL_I2C_MspInit+0xd0>)
 8000802:	f000 fa03 	bl	8000c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <HAL_I2C_MspInit+0xc8>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080e:	4a08      	ldr	r2, [pc, #32]	@ (8000830 <HAL_I2C_MspInit+0xc8>)
 8000810:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000814:	6413      	str	r3, [r2, #64]	@ 0x40
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <HAL_I2C_MspInit+0xc8>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000822:	bf00      	nop
 8000824:	3728      	adds	r7, #40	@ 0x28
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40005c00 	.word	0x40005c00
 8000830:	40023800 	.word	0x40023800
 8000834:	40020800 	.word	0x40020800
 8000838:	40020000 	.word	0x40020000

0800083c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <NMI_Handler+0x4>

08000844 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <HardFault_Handler+0x4>

0800084c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <MemManage_Handler+0x4>

08000854 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <UsageFault_Handler+0x4>

08000864 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000892:	f000 f891 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <SystemInit+0x20>)
 80008a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008a6:	4a05      	ldr	r2, [pc, #20]	@ (80008bc <SystemInit+0x20>)
 80008a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008c4:	f7ff ffea 	bl	800089c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008c8:	480c      	ldr	r0, [pc, #48]	@ (80008fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ca:	490d      	ldr	r1, [pc, #52]	@ (8000900 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000904 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008e0:	4c0a      	ldr	r4, [pc, #40]	@ (800090c <LoopFillZerobss+0x22>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ee:	f001 ff99 	bl	8002824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008f2:	f7ff fe3f 	bl	8000574 <main>
  bx  lr    
 80008f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000900:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000904:	080028ac 	.word	0x080028ac
  ldr r2, =_sbss
 8000908:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800090c:	20000080 	.word	0x20000080

08000910 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC_IRQHandler>
	...

08000914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000918:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <HAL_Init+0x40>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0d      	ldr	r2, [pc, #52]	@ (8000954 <HAL_Init+0x40>)
 800091e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000922:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000924:	4b0b      	ldr	r3, [pc, #44]	@ (8000954 <HAL_Init+0x40>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0a      	ldr	r2, [pc, #40]	@ (8000954 <HAL_Init+0x40>)
 800092a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800092e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000930:	4b08      	ldr	r3, [pc, #32]	@ (8000954 <HAL_Init+0x40>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a07      	ldr	r2, [pc, #28]	@ (8000954 <HAL_Init+0x40>)
 8000936:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800093a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 f931 	bl	8000ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000942:	200f      	movs	r0, #15
 8000944:	f000 f808 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000948:	f7ff fee6 	bl	8000718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023c00 	.word	0x40023c00

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <HAL_InitTick+0x54>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <HAL_InitTick+0x58>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800096e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f93b 	bl	8000bf2 <HAL_SYSTICK_Config>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e00e      	b.n	80009a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d80a      	bhi.n	80009a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	f000 f911 	bl	8000bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4a06      	ldr	r2, [pc, #24]	@ (80009b4 <HAL_InitTick+0x5c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	e000      	b.n	80009a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20000008 	.word	0x20000008
 80009b4:	20000004 	.word	0x20000004

080009b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <HAL_IncTick+0x20>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_IncTick+0x24>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a04      	ldr	r2, [pc, #16]	@ (80009dc <HAL_IncTick+0x24>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008
 80009dc:	2000007c 	.word	0x2000007c

080009e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b03      	ldr	r3, [pc, #12]	@ (80009f4 <HAL_GetTick+0x14>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	2000007c 	.word	0x2000007c

080009f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a00:	f7ff ffee 	bl	80009e0 <HAL_GetTick>
 8000a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a10:	d005      	beq.n	8000a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a12:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <HAL_Delay+0x44>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a1e:	bf00      	nop
 8000a20:	f7ff ffde 	bl	80009e0 <HAL_GetTick>
 8000a24:	4602      	mov	r2, r0
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d8f7      	bhi.n	8000a20 <HAL_Delay+0x28>
  {
  }
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000008 	.word	0x20000008

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	@ (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	@ (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	6039      	str	r1, [r7, #0]
 8000aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	db0a      	blt.n	8000ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	490c      	ldr	r1, [pc, #48]	@ (8000af0 <__NVIC_SetPriority+0x4c>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	0112      	lsls	r2, r2, #4
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000acc:	e00a      	b.n	8000ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4908      	ldr	r1, [pc, #32]	@ (8000af4 <__NVIC_SetPriority+0x50>)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	f003 030f 	and.w	r3, r3, #15
 8000ada:	3b04      	subs	r3, #4
 8000adc:	0112      	lsls	r2, r2, #4
 8000ade:	b2d2      	uxtb	r2, r2
 8000ae0:	440b      	add	r3, r1
 8000ae2:	761a      	strb	r2, [r3, #24]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000e100 	.word	0xe000e100
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b089      	sub	sp, #36	@ 0x24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	f1c3 0307 	rsb	r3, r3, #7
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	bf28      	it	cs
 8000b16:	2304      	movcs	r3, #4
 8000b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	2b06      	cmp	r3, #6
 8000b20:	d902      	bls.n	8000b28 <NVIC_EncodePriority+0x30>
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3b03      	subs	r3, #3
 8000b26:	e000      	b.n	8000b2a <NVIC_EncodePriority+0x32>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43da      	mvns	r2, r3
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b40:	f04f 31ff 	mov.w	r1, #4294967295
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4a:	43d9      	mvns	r1, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	4313      	orrs	r3, r2
         );
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3724      	adds	r7, #36	@ 0x24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b70:	d301      	bcc.n	8000b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00f      	b.n	8000b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba0 <SysTick_Config+0x40>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b7e:	210f      	movs	r1, #15
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f7ff ff8e 	bl	8000aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b88:	4b05      	ldr	r3, [pc, #20]	@ (8000ba0 <SysTick_Config+0x40>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8e:	4b04      	ldr	r3, [pc, #16]	@ (8000ba0 <SysTick_Config+0x40>)
 8000b90:	2207      	movs	r2, #7
 8000b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	e000e010 	.word	0xe000e010

08000ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ff47 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bcc:	f7ff ff5c 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	6978      	ldr	r0, [r7, #20]
 8000bd8:	f7ff ff8e 	bl	8000af8 <NVIC_EncodePriority>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be2:	4611      	mov	r1, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff5d 	bl	8000aa4 <__NVIC_SetPriority>
}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ffb0 	bl	8000b60 <SysTick_Config>
 8000c00:	4603      	mov	r3, r0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	@ 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
 8000c26:	e16b      	b.n	8000f00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c28:	2201      	movs	r2, #1
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f040 815a 	bne.w	8000efa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d005      	beq.n	8000c5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d130      	bne.n	8000cc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	2203      	movs	r2, #3
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	4013      	ands	r3, r2
 8000c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	68da      	ldr	r2, [r3, #12]
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c94:	2201      	movs	r2, #1
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	091b      	lsrs	r3, r3, #4
 8000caa:	f003 0201 	and.w	r2, r3, #1
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	d017      	beq.n	8000cfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	689a      	ldr	r2, [r3, #8]
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d123      	bne.n	8000d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	08da      	lsrs	r2, r3, #3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3208      	adds	r2, #8
 8000d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	f003 0307 	and.w	r3, r3, #7
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	220f      	movs	r2, #15
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	691a      	ldr	r2, [r3, #16]
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	08da      	lsrs	r2, r3, #3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3208      	adds	r2, #8
 8000d4a:	69b9      	ldr	r1, [r7, #24]
 8000d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0203 	and.w	r2, r3, #3
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f000 80b4 	beq.w	8000efa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b60      	ldr	r3, [pc, #384]	@ (8000f18 <HAL_GPIO_Init+0x30c>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9a:	4a5f      	ldr	r2, [pc, #380]	@ (8000f18 <HAL_GPIO_Init+0x30c>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000da2:	4b5d      	ldr	r3, [pc, #372]	@ (8000f18 <HAL_GPIO_Init+0x30c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dae:	4a5b      	ldr	r2, [pc, #364]	@ (8000f1c <HAL_GPIO_Init+0x310>)
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	089b      	lsrs	r3, r3, #2
 8000db4:	3302      	adds	r3, #2
 8000db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	220f      	movs	r2, #15
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a52      	ldr	r2, [pc, #328]	@ (8000f20 <HAL_GPIO_Init+0x314>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d02b      	beq.n	8000e32 <HAL_GPIO_Init+0x226>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a51      	ldr	r2, [pc, #324]	@ (8000f24 <HAL_GPIO_Init+0x318>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d025      	beq.n	8000e2e <HAL_GPIO_Init+0x222>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a50      	ldr	r2, [pc, #320]	@ (8000f28 <HAL_GPIO_Init+0x31c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d01f      	beq.n	8000e2a <HAL_GPIO_Init+0x21e>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a4f      	ldr	r2, [pc, #316]	@ (8000f2c <HAL_GPIO_Init+0x320>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d019      	beq.n	8000e26 <HAL_GPIO_Init+0x21a>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a4e      	ldr	r2, [pc, #312]	@ (8000f30 <HAL_GPIO_Init+0x324>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d013      	beq.n	8000e22 <HAL_GPIO_Init+0x216>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4d      	ldr	r2, [pc, #308]	@ (8000f34 <HAL_GPIO_Init+0x328>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d00d      	beq.n	8000e1e <HAL_GPIO_Init+0x212>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a4c      	ldr	r2, [pc, #304]	@ (8000f38 <HAL_GPIO_Init+0x32c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d007      	beq.n	8000e1a <HAL_GPIO_Init+0x20e>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a4b      	ldr	r2, [pc, #300]	@ (8000f3c <HAL_GPIO_Init+0x330>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d101      	bne.n	8000e16 <HAL_GPIO_Init+0x20a>
 8000e12:	2307      	movs	r3, #7
 8000e14:	e00e      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e16:	2308      	movs	r3, #8
 8000e18:	e00c      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e1a:	2306      	movs	r3, #6
 8000e1c:	e00a      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e1e:	2305      	movs	r3, #5
 8000e20:	e008      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e22:	2304      	movs	r3, #4
 8000e24:	e006      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e26:	2303      	movs	r3, #3
 8000e28:	e004      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	e002      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <HAL_GPIO_Init+0x228>
 8000e32:	2300      	movs	r3, #0
 8000e34:	69fa      	ldr	r2, [r7, #28]
 8000e36:	f002 0203 	and.w	r2, r2, #3
 8000e3a:	0092      	lsls	r2, r2, #2
 8000e3c:	4093      	lsls	r3, r2
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e44:	4935      	ldr	r1, [pc, #212]	@ (8000f1c <HAL_GPIO_Init+0x310>)
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	089b      	lsrs	r3, r3, #2
 8000e4a:	3302      	adds	r3, #2
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e52:	4b3b      	ldr	r3, [pc, #236]	@ (8000f40 <HAL_GPIO_Init+0x334>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e76:	4a32      	ldr	r2, [pc, #200]	@ (8000f40 <HAL_GPIO_Init+0x334>)
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e7c:	4b30      	ldr	r3, [pc, #192]	@ (8000f40 <HAL_GPIO_Init+0x334>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ea0:	4a27      	ldr	r2, [pc, #156]	@ (8000f40 <HAL_GPIO_Init+0x334>)
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ea6:	4b26      	ldr	r3, [pc, #152]	@ (8000f40 <HAL_GPIO_Init+0x334>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eca:	4a1d      	ldr	r2, [pc, #116]	@ (8000f40 <HAL_GPIO_Init+0x334>)
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <HAL_GPIO_Init+0x334>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ef4:	4a12      	ldr	r2, [pc, #72]	@ (8000f40 <HAL_GPIO_Init+0x334>)
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3301      	adds	r3, #1
 8000efe:	61fb      	str	r3, [r7, #28]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	2b0f      	cmp	r3, #15
 8000f04:	f67f ae90 	bls.w	8000c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3724      	adds	r7, #36	@ 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40013800 	.word	0x40013800
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40020400 	.word	0x40020400
 8000f28:	40020800 	.word	0x40020800
 8000f2c:	40020c00 	.word	0x40020c00
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40021400 	.word	0x40021400
 8000f38:	40021800 	.word	0x40021800
 8000f3c:	40021c00 	.word	0x40021c00
 8000f40:	40013c00 	.word	0x40013c00

08000f44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e12b      	b.n	80011ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d106      	bne.n	8000f70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff fbfc 	bl	8000768 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2224      	movs	r2, #36	@ 0x24
 8000f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 0201 	bic.w	r2, r2, #1
 8000f86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000f96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000fa6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000fa8:	f001 fc20 	bl	80027ec <HAL_RCC_GetPCLK1Freq>
 8000fac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	4a81      	ldr	r2, [pc, #516]	@ (80011b8 <HAL_I2C_Init+0x274>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d807      	bhi.n	8000fc8 <HAL_I2C_Init+0x84>
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4a80      	ldr	r2, [pc, #512]	@ (80011bc <HAL_I2C_Init+0x278>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	bf94      	ite	ls
 8000fc0:	2301      	movls	r3, #1
 8000fc2:	2300      	movhi	r3, #0
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	e006      	b.n	8000fd6 <HAL_I2C_Init+0x92>
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4a7d      	ldr	r2, [pc, #500]	@ (80011c0 <HAL_I2C_Init+0x27c>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	bf94      	ite	ls
 8000fd0:	2301      	movls	r3, #1
 8000fd2:	2300      	movhi	r3, #0
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e0e7      	b.n	80011ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4a78      	ldr	r2, [pc, #480]	@ (80011c4 <HAL_I2C_Init+0x280>)
 8000fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe6:	0c9b      	lsrs	r3, r3, #18
 8000fe8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	68ba      	ldr	r2, [r7, #8]
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	4a6a      	ldr	r2, [pc, #424]	@ (80011b8 <HAL_I2C_Init+0x274>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d802      	bhi.n	8001018 <HAL_I2C_Init+0xd4>
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	3301      	adds	r3, #1
 8001016:	e009      	b.n	800102c <HAL_I2C_Init+0xe8>
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800101e:	fb02 f303 	mul.w	r3, r2, r3
 8001022:	4a69      	ldr	r2, [pc, #420]	@ (80011c8 <HAL_I2C_Init+0x284>)
 8001024:	fba2 2303 	umull	r2, r3, r2, r3
 8001028:	099b      	lsrs	r3, r3, #6
 800102a:	3301      	adds	r3, #1
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	6812      	ldr	r2, [r2, #0]
 8001030:	430b      	orrs	r3, r1
 8001032:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800103e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	495c      	ldr	r1, [pc, #368]	@ (80011b8 <HAL_I2C_Init+0x274>)
 8001048:	428b      	cmp	r3, r1
 800104a:	d819      	bhi.n	8001080 <HAL_I2C_Init+0x13c>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	1e59      	subs	r1, r3, #1
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fbb1 f3f3 	udiv	r3, r1, r3
 800105a:	1c59      	adds	r1, r3, #1
 800105c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001060:	400b      	ands	r3, r1
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00a      	beq.n	800107c <HAL_I2C_Init+0x138>
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	1e59      	subs	r1, r3, #1
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fbb1 f3f3 	udiv	r3, r1, r3
 8001074:	3301      	adds	r3, #1
 8001076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800107a:	e051      	b.n	8001120 <HAL_I2C_Init+0x1dc>
 800107c:	2304      	movs	r3, #4
 800107e:	e04f      	b.n	8001120 <HAL_I2C_Init+0x1dc>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d111      	bne.n	80010ac <HAL_I2C_Init+0x168>
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	1e58      	subs	r0, r3, #1
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6859      	ldr	r1, [r3, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	440b      	add	r3, r1
 8001096:	fbb0 f3f3 	udiv	r3, r0, r3
 800109a:	3301      	adds	r3, #1
 800109c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bf0c      	ite	eq
 80010a4:	2301      	moveq	r3, #1
 80010a6:	2300      	movne	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	e012      	b.n	80010d2 <HAL_I2C_Init+0x18e>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	1e58      	subs	r0, r3, #1
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6859      	ldr	r1, [r3, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	0099      	lsls	r1, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	fbb0 f3f3 	udiv	r3, r0, r3
 80010c2:	3301      	adds	r3, #1
 80010c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	bf0c      	ite	eq
 80010cc:	2301      	moveq	r3, #1
 80010ce:	2300      	movne	r3, #0
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_I2C_Init+0x196>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e022      	b.n	8001120 <HAL_I2C_Init+0x1dc>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10e      	bne.n	8001100 <HAL_I2C_Init+0x1bc>
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	1e58      	subs	r0, r3, #1
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6859      	ldr	r1, [r3, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	440b      	add	r3, r1
 80010f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80010f4:	3301      	adds	r3, #1
 80010f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010fe:	e00f      	b.n	8001120 <HAL_I2C_Init+0x1dc>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	1e58      	subs	r0, r3, #1
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6859      	ldr	r1, [r3, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	0099      	lsls	r1, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	fbb0 f3f3 	udiv	r3, r0, r3
 8001116:	3301      	adds	r3, #1
 8001118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800111c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	6809      	ldr	r1, [r1, #0]
 8001124:	4313      	orrs	r3, r2
 8001126:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69da      	ldr	r2, [r3, #28]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a1b      	ldr	r3, [r3, #32]
 800113a:	431a      	orrs	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800114e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	6911      	ldr	r1, [r2, #16]
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	68d2      	ldr	r2, [r2, #12]
 800115a:	4311      	orrs	r1, r2
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	430b      	orrs	r3, r1
 8001162:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695a      	ldr	r2, [r3, #20]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	431a      	orrs	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0201 	orr.w	r2, r2, #1
 800118e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2220      	movs	r2, #32
 800119a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	000186a0 	.word	0x000186a0
 80011bc:	001e847f 	.word	0x001e847f
 80011c0:	003d08ff 	.word	0x003d08ff
 80011c4:	431bde83 	.word	0x431bde83
 80011c8:	10624dd3 	.word	0x10624dd3

080011cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	4608      	mov	r0, r1
 80011d6:	4611      	mov	r1, r2
 80011d8:	461a      	mov	r2, r3
 80011da:	4603      	mov	r3, r0
 80011dc:	817b      	strh	r3, [r7, #10]
 80011de:	460b      	mov	r3, r1
 80011e0:	813b      	strh	r3, [r7, #8]
 80011e2:	4613      	mov	r3, r2
 80011e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80011e6:	f7ff fbfb 	bl	80009e0 <HAL_GetTick>
 80011ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b20      	cmp	r3, #32
 80011f6:	f040 80d9 	bne.w	80013ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2319      	movs	r3, #25
 8001200:	2201      	movs	r2, #1
 8001202:	496d      	ldr	r1, [pc, #436]	@ (80013b8 <HAL_I2C_Mem_Write+0x1ec>)
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f000 fc8b 	bl	8001b20 <I2C_WaitOnFlagUntilTimeout>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001210:	2302      	movs	r3, #2
 8001212:	e0cc      	b.n	80013ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800121a:	2b01      	cmp	r3, #1
 800121c:	d101      	bne.n	8001222 <HAL_I2C_Mem_Write+0x56>
 800121e:	2302      	movs	r3, #2
 8001220:	e0c5      	b.n	80013ae <HAL_I2C_Mem_Write+0x1e2>
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b01      	cmp	r3, #1
 8001236:	d007      	beq.n	8001248 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 0201 	orr.w	r2, r2, #1
 8001246:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001256:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2221      	movs	r2, #33	@ 0x21
 800125c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2240      	movs	r2, #64	@ 0x40
 8001264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2200      	movs	r2, #0
 800126c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6a3a      	ldr	r2, [r7, #32]
 8001272:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001278:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800127e:	b29a      	uxth	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4a4d      	ldr	r2, [pc, #308]	@ (80013bc <HAL_I2C_Mem_Write+0x1f0>)
 8001288:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800128a:	88f8      	ldrh	r0, [r7, #6]
 800128c:	893a      	ldrh	r2, [r7, #8]
 800128e:	8979      	ldrh	r1, [r7, #10]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	4603      	mov	r3, r0
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f000 fac2 	bl	8001824 <I2C_RequestMemoryWrite>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d052      	beq.n	800134c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e081      	b.n	80013ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f000 fd50 	bl	8001d54 <I2C_WaitOnTXEFlagUntilTimeout>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00d      	beq.n	80012d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	2b04      	cmp	r3, #4
 80012c0:	d107      	bne.n	80012d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e06b      	b.n	80013ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012da:	781a      	ldrb	r2, [r3, #0]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012f0:	3b01      	subs	r3, #1
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	3b01      	subs	r3, #1
 8001300:	b29a      	uxth	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b04      	cmp	r3, #4
 8001312:	d11b      	bne.n	800134c <HAL_I2C_Mem_Write+0x180>
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001318:	2b00      	cmp	r3, #0
 800131a:	d017      	beq.n	800134c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001320:	781a      	ldrb	r2, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132c:	1c5a      	adds	r2, r3, #1
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001336:	3b01      	subs	r3, #1
 8001338:	b29a      	uxth	r2, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001342:	b29b      	uxth	r3, r3
 8001344:	3b01      	subs	r3, #1
 8001346:	b29a      	uxth	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1aa      	bne.n	80012aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f000 fd43 	bl	8001de4 <I2C_WaitOnBTFFlagUntilTimeout>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00d      	beq.n	8001380 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001368:	2b04      	cmp	r3, #4
 800136a:	d107      	bne.n	800137c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800137a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e016      	b.n	80013ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800138e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2220      	movs	r2, #32
 8001394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80013a8:	2300      	movs	r3, #0
 80013aa:	e000      	b.n	80013ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80013ac:	2302      	movs	r3, #2
  }
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	00100002 	.word	0x00100002
 80013bc:	ffff0000 	.word	0xffff0000

080013c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	@ 0x30
 80013c4:	af02      	add	r7, sp, #8
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	4608      	mov	r0, r1
 80013ca:	4611      	mov	r1, r2
 80013cc:	461a      	mov	r2, r3
 80013ce:	4603      	mov	r3, r0
 80013d0:	817b      	strh	r3, [r7, #10]
 80013d2:	460b      	mov	r3, r1
 80013d4:	813b      	strh	r3, [r7, #8]
 80013d6:	4613      	mov	r3, r2
 80013d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013da:	f7ff fb01 	bl	80009e0 <HAL_GetTick>
 80013de:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b20      	cmp	r3, #32
 80013ea:	f040 8214 	bne.w	8001816 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2319      	movs	r3, #25
 80013f4:	2201      	movs	r2, #1
 80013f6:	497b      	ldr	r1, [pc, #492]	@ (80015e4 <HAL_I2C_Mem_Read+0x224>)
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f000 fb91 	bl	8001b20 <I2C_WaitOnFlagUntilTimeout>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001404:	2302      	movs	r3, #2
 8001406:	e207      	b.n	8001818 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <HAL_I2C_Mem_Read+0x56>
 8001412:	2302      	movs	r3, #2
 8001414:	e200      	b.n	8001818 <HAL_I2C_Mem_Read+0x458>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b01      	cmp	r3, #1
 800142a:	d007      	beq.n	800143c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0201 	orr.w	r2, r2, #1
 800143a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800144a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2222      	movs	r2, #34	@ 0x22
 8001450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2240      	movs	r2, #64	@ 0x40
 8001458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2200      	movs	r2, #0
 8001460:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001466:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800146c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001472:	b29a      	uxth	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4a5b      	ldr	r2, [pc, #364]	@ (80015e8 <HAL_I2C_Mem_Read+0x228>)
 800147c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800147e:	88f8      	ldrh	r0, [r7, #6]
 8001480:	893a      	ldrh	r2, [r7, #8]
 8001482:	8979      	ldrh	r1, [r7, #10]
 8001484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	4603      	mov	r3, r0
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f000 fa5e 	bl	8001950 <I2C_RequestMemoryRead>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e1bc      	b.n	8001818 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d113      	bne.n	80014ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	623b      	str	r3, [r7, #32]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	623b      	str	r3, [r7, #32]
 80014ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	e190      	b.n	80017f0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d11b      	bne.n	800150e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	61fb      	str	r3, [r7, #28]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	61fb      	str	r3, [r7, #28]
 80014fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	e170      	b.n	80017f0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001512:	2b02      	cmp	r3, #2
 8001514:	d11b      	bne.n	800154e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001524:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001534:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	61bb      	str	r3, [r7, #24]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	61bb      	str	r3, [r7, #24]
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	e150      	b.n	80017f0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001564:	e144      	b.n	80017f0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800156a:	2b03      	cmp	r3, #3
 800156c:	f200 80f1 	bhi.w	8001752 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001574:	2b01      	cmp	r3, #1
 8001576:	d123      	bne.n	80015c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800157a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f000 fc79 	bl	8001e74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e145      	b.n	8001818 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	691a      	ldr	r2, [r3, #16]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015a8:	3b01      	subs	r3, #1
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80015be:	e117      	b.n	80017f0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d14e      	bne.n	8001666 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015ce:	2200      	movs	r2, #0
 80015d0:	4906      	ldr	r1, [pc, #24]	@ (80015ec <HAL_I2C_Mem_Read+0x22c>)
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f000 faa4 	bl	8001b20 <I2C_WaitOnFlagUntilTimeout>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d008      	beq.n	80015f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e11a      	b.n	8001818 <HAL_I2C_Mem_Read+0x458>
 80015e2:	bf00      	nop
 80015e4:	00100002 	.word	0x00100002
 80015e8:	ffff0000 	.word	0xffff0000
 80015ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	691a      	ldr	r2, [r3, #16]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800161c:	3b01      	subs	r3, #1
 800161e:	b29a      	uxth	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001628:	b29b      	uxth	r3, r3
 800162a:	3b01      	subs	r3, #1
 800162c:	b29a      	uxth	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800164e:	3b01      	subs	r3, #1
 8001650:	b29a      	uxth	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800165a:	b29b      	uxth	r3, r3
 800165c:	3b01      	subs	r3, #1
 800165e:	b29a      	uxth	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001664:	e0c4      	b.n	80017f0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800166c:	2200      	movs	r2, #0
 800166e:	496c      	ldr	r1, [pc, #432]	@ (8001820 <HAL_I2C_Mem_Read+0x460>)
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f000 fa55 	bl	8001b20 <I2C_WaitOnFlagUntilTimeout>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e0cb      	b.n	8001818 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800168e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	691a      	ldr	r2, [r3, #16]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016ac:	3b01      	subs	r3, #1
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	3b01      	subs	r3, #1
 80016bc:	b29a      	uxth	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016c8:	2200      	movs	r2, #0
 80016ca:	4955      	ldr	r1, [pc, #340]	@ (8001820 <HAL_I2C_Mem_Read+0x460>)
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f000 fa27 	bl	8001b20 <I2C_WaitOnFlagUntilTimeout>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e09d      	b.n	8001818 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	691a      	ldr	r2, [r3, #16]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001708:	3b01      	subs	r3, #1
 800170a:	b29a      	uxth	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001714:	b29b      	uxth	r3, r3
 8001716:	3b01      	subs	r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	691a      	ldr	r2, [r3, #16]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800173a:	3b01      	subs	r3, #1
 800173c:	b29a      	uxth	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001746:	b29b      	uxth	r3, r3
 8001748:	3b01      	subs	r3, #1
 800174a:	b29a      	uxth	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001750:	e04e      	b.n	80017f0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001754:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 fb8c 	bl	8001e74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e058      	b.n	8001818 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	691a      	ldr	r2, [r3, #16]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001782:	3b01      	subs	r3, #1
 8001784:	b29a      	uxth	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800178e:	b29b      	uxth	r3, r3
 8001790:	3b01      	subs	r3, #1
 8001792:	b29a      	uxth	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d124      	bne.n	80017f0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d107      	bne.n	80017be <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017bc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	691a      	ldr	r2, [r3, #16]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017da:	3b01      	subs	r3, #1
 80017dc:	b29a      	uxth	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	3b01      	subs	r3, #1
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f47f aeb6 	bne.w	8001566 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2220      	movs	r2, #32
 80017fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	e000      	b.n	8001818 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001816:	2302      	movs	r3, #2
  }
}
 8001818:	4618      	mov	r0, r3
 800181a:	3728      	adds	r7, #40	@ 0x28
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	00010004 	.word	0x00010004

08001824 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af02      	add	r7, sp, #8
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	4608      	mov	r0, r1
 800182e:	4611      	mov	r1, r2
 8001830:	461a      	mov	r2, r3
 8001832:	4603      	mov	r3, r0
 8001834:	817b      	strh	r3, [r7, #10]
 8001836:	460b      	mov	r3, r1
 8001838:	813b      	strh	r3, [r7, #8]
 800183a:	4613      	mov	r3, r2
 800183c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800184c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800184e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	2200      	movs	r2, #0
 8001856:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 f960 	bl	8001b20 <I2C_WaitOnFlagUntilTimeout>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00d      	beq.n	8001882 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001870:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001874:	d103      	bne.n	800187e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800187c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e05f      	b.n	8001942 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001882:	897b      	ldrh	r3, [r7, #10]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	461a      	mov	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001890:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001894:	6a3a      	ldr	r2, [r7, #32]
 8001896:	492d      	ldr	r1, [pc, #180]	@ (800194c <I2C_RequestMemoryWrite+0x128>)
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 f9bb 	bl	8001c14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e04c      	b.n	8001942 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018c0:	6a39      	ldr	r1, [r7, #32]
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 fa46 	bl	8001d54 <I2C_WaitOnTXEFlagUntilTimeout>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00d      	beq.n	80018ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d107      	bne.n	80018e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e02b      	b.n	8001942 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d105      	bne.n	80018fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018f0:	893b      	ldrh	r3, [r7, #8]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	611a      	str	r2, [r3, #16]
 80018fa:	e021      	b.n	8001940 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80018fc:	893b      	ldrh	r3, [r7, #8]
 80018fe:	0a1b      	lsrs	r3, r3, #8
 8001900:	b29b      	uxth	r3, r3
 8001902:	b2da      	uxtb	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800190a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800190c:	6a39      	ldr	r1, [r7, #32]
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f000 fa20 	bl	8001d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00d      	beq.n	8001936 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	2b04      	cmp	r3, #4
 8001920:	d107      	bne.n	8001932 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001930:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e005      	b.n	8001942 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001936:	893b      	ldrh	r3, [r7, #8]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	00010002 	.word	0x00010002

08001950 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af02      	add	r7, sp, #8
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	4608      	mov	r0, r1
 800195a:	4611      	mov	r1, r2
 800195c:	461a      	mov	r2, r3
 800195e:	4603      	mov	r3, r0
 8001960:	817b      	strh	r3, [r7, #10]
 8001962:	460b      	mov	r3, r1
 8001964:	813b      	strh	r3, [r7, #8]
 8001966:	4613      	mov	r3, r2
 8001968:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001978:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001988:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800198a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	2200      	movs	r2, #0
 8001992:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 f8c2 	bl	8001b20 <I2C_WaitOnFlagUntilTimeout>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00d      	beq.n	80019be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019b0:	d103      	bne.n	80019ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e0aa      	b.n	8001b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019be:	897b      	ldrh	r3, [r7, #10]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80019cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d0:	6a3a      	ldr	r2, [r7, #32]
 80019d2:	4952      	ldr	r1, [pc, #328]	@ (8001b1c <I2C_RequestMemoryRead+0x1cc>)
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 f91d 	bl	8001c14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e097      	b.n	8001b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019fc:	6a39      	ldr	r1, [r7, #32]
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 f9a8 	bl	8001d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00d      	beq.n	8001a26 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d107      	bne.n	8001a22 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e076      	b.n	8001b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d105      	bne.n	8001a38 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a2c:	893b      	ldrh	r3, [r7, #8]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	611a      	str	r2, [r3, #16]
 8001a36:	e021      	b.n	8001a7c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001a38:	893b      	ldrh	r3, [r7, #8]
 8001a3a:	0a1b      	lsrs	r3, r3, #8
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a48:	6a39      	ldr	r1, [r7, #32]
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 f982 	bl	8001d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00d      	beq.n	8001a72 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d107      	bne.n	8001a6e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e050      	b.n	8001b14 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a72:	893b      	ldrh	r3, [r7, #8]
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a7e:	6a39      	ldr	r1, [r7, #32]
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 f967 	bl	8001d54 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00d      	beq.n	8001aa8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d107      	bne.n	8001aa4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001aa2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e035      	b.n	8001b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ab6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 f82b 	bl	8001b20 <I2C_WaitOnFlagUntilTimeout>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00d      	beq.n	8001aec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ade:	d103      	bne.n	8001ae8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ae6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e013      	b.n	8001b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001aec:	897b      	ldrh	r3, [r7, #10]
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	6a3a      	ldr	r2, [r7, #32]
 8001b00:	4906      	ldr	r1, [pc, #24]	@ (8001b1c <I2C_RequestMemoryRead+0x1cc>)
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 f886 	bl	8001c14 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	00010002 	.word	0x00010002

08001b20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b30:	e048      	b.n	8001bc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b38:	d044      	beq.n	8001bc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b3a:	f7fe ff51 	bl	80009e0 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d302      	bcc.n	8001b50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d139      	bne.n	8001bc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	0c1b      	lsrs	r3, r3, #16
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d10d      	bne.n	8001b76 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	43da      	mvns	r2, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	4013      	ands	r3, r2
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	bf0c      	ite	eq
 8001b6c:	2301      	moveq	r3, #1
 8001b6e:	2300      	movne	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	461a      	mov	r2, r3
 8001b74:	e00c      	b.n	8001b90 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	43da      	mvns	r2, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	4013      	ands	r3, r2
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf0c      	ite	eq
 8001b88:	2301      	moveq	r3, #1
 8001b8a:	2300      	movne	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	461a      	mov	r2, r3
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d116      	bne.n	8001bc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb0:	f043 0220 	orr.w	r2, r3, #32
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e023      	b.n	8001c0c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	0c1b      	lsrs	r3, r3, #16
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d10d      	bne.n	8001bea <I2C_WaitOnFlagUntilTimeout+0xca>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	43da      	mvns	r2, r3
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	bf0c      	ite	eq
 8001be0:	2301      	moveq	r3, #1
 8001be2:	2300      	movne	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	461a      	mov	r2, r3
 8001be8:	e00c      	b.n	8001c04 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf0c      	ite	eq
 8001bfc:	2301      	moveq	r3, #1
 8001bfe:	2300      	movne	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d093      	beq.n	8001b32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c22:	e071      	b.n	8001d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c32:	d123      	bne.n	8001c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c42:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2220      	movs	r2, #32
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c68:	f043 0204 	orr.w	r2, r3, #4
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e067      	b.n	8001d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c82:	d041      	beq.n	8001d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c84:	f7fe feac 	bl	80009e0 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d302      	bcc.n	8001c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d136      	bne.n	8001d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	0c1b      	lsrs	r3, r3, #16
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d10c      	bne.n	8001cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	43da      	mvns	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	bf14      	ite	ne
 8001cb6:	2301      	movne	r3, #1
 8001cb8:	2300      	moveq	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	e00b      	b.n	8001cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	43da      	mvns	r2, r3
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bf14      	ite	ne
 8001cd0:	2301      	movne	r3, #1
 8001cd2:	2300      	moveq	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d016      	beq.n	8001d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf4:	f043 0220 	orr.w	r2, r3, #32
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e021      	b.n	8001d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	0c1b      	lsrs	r3, r3, #16
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d10c      	bne.n	8001d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	43da      	mvns	r2, r3
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bf14      	ite	ne
 8001d24:	2301      	movne	r3, #1
 8001d26:	2300      	moveq	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	e00b      	b.n	8001d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	43da      	mvns	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	4013      	ands	r3, r2
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bf14      	ite	ne
 8001d3e:	2301      	movne	r3, #1
 8001d40:	2300      	moveq	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f47f af6d 	bne.w	8001c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d60:	e034      	b.n	8001dcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 f8e3 	bl	8001f2e <I2C_IsAcknowledgeFailed>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e034      	b.n	8001ddc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d028      	beq.n	8001dcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d7a:	f7fe fe31 	bl	80009e0 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d302      	bcc.n	8001d90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d11d      	bne.n	8001dcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d9a:	2b80      	cmp	r3, #128	@ 0x80
 8001d9c:	d016      	beq.n	8001dcc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2220      	movs	r2, #32
 8001da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	f043 0220 	orr.w	r2, r3, #32
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e007      	b.n	8001ddc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dd6:	2b80      	cmp	r3, #128	@ 0x80
 8001dd8:	d1c3      	bne.n	8001d62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001df0:	e034      	b.n	8001e5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f89b 	bl	8001f2e <I2C_IsAcknowledgeFailed>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e034      	b.n	8001e6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e08:	d028      	beq.n	8001e5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e0a:	f7fe fde9 	bl	80009e0 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d302      	bcc.n	8001e20 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d11d      	bne.n	8001e5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d016      	beq.n	8001e5c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2220      	movs	r2, #32
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e48:	f043 0220 	orr.w	r2, r3, #32
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e007      	b.n	8001e6c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d1c3      	bne.n	8001df2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e80:	e049      	b.n	8001f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	2b10      	cmp	r3, #16
 8001e8e:	d119      	bne.n	8001ec4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0210 	mvn.w	r2, #16
 8001e98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e030      	b.n	8001f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ec4:	f7fe fd8c 	bl	80009e0 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d302      	bcc.n	8001eda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d11d      	bne.n	8001f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ee4:	2b40      	cmp	r3, #64	@ 0x40
 8001ee6:	d016      	beq.n	8001f16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	f043 0220 	orr.w	r2, r3, #32
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e007      	b.n	8001f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f20:	2b40      	cmp	r3, #64	@ 0x40
 8001f22:	d1ae      	bne.n	8001e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f44:	d11b      	bne.n	8001f7e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f4e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	f043 0204 	orr.w	r2, r3, #4
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e267      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d075      	beq.n	8002096 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001faa:	4b88      	ldr	r3, [pc, #544]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d00c      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fb6:	4b85      	ldr	r3, [pc, #532]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d112      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fc2:	4b82      	ldr	r3, [pc, #520]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fce:	d10b      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd0:	4b7e      	ldr	r3, [pc, #504]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d05b      	beq.n	8002094 <HAL_RCC_OscConfig+0x108>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d157      	bne.n	8002094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e242      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ff0:	d106      	bne.n	8002000 <HAL_RCC_OscConfig+0x74>
 8001ff2:	4b76      	ldr	r3, [pc, #472]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a75      	ldr	r2, [pc, #468]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e01d      	b.n	800203c <HAL_RCC_OscConfig+0xb0>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002008:	d10c      	bne.n	8002024 <HAL_RCC_OscConfig+0x98>
 800200a:	4b70      	ldr	r3, [pc, #448]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a6f      	ldr	r2, [pc, #444]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8002010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	4b6d      	ldr	r3, [pc, #436]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a6c      	ldr	r2, [pc, #432]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	e00b      	b.n	800203c <HAL_RCC_OscConfig+0xb0>
 8002024:	4b69      	ldr	r3, [pc, #420]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a68      	ldr	r2, [pc, #416]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 800202a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	4b66      	ldr	r3, [pc, #408]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a65      	ldr	r2, [pc, #404]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8002036:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800203a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d013      	beq.n	800206c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7fe fccc 	bl	80009e0 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800204c:	f7fe fcc8 	bl	80009e0 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	@ 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e207      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b5b      	ldr	r3, [pc, #364]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0xc0>
 800206a:	e014      	b.n	8002096 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7fe fcb8 	bl	80009e0 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002074:	f7fe fcb4 	bl	80009e0 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	@ 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e1f3      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002086:	4b51      	ldr	r3, [pc, #324]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0xe8>
 8002092:	e000      	b.n	8002096 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d063      	beq.n	800216a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80020a2:	4b4a      	ldr	r3, [pc, #296]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00b      	beq.n	80020c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ae:	4b47      	ldr	r3, [pc, #284]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d11c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ba:	4b44      	ldr	r3, [pc, #272]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d116      	bne.n	80020f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c6:	4b41      	ldr	r3, [pc, #260]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d005      	beq.n	80020de <HAL_RCC_OscConfig+0x152>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d001      	beq.n	80020de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e1c7      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020de:	4b3b      	ldr	r3, [pc, #236]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4937      	ldr	r1, [pc, #220]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	e03a      	b.n	800216a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d020      	beq.n	800213e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020fc:	4b34      	ldr	r3, [pc, #208]	@ (80021d0 <HAL_RCC_OscConfig+0x244>)
 80020fe:	2201      	movs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002102:	f7fe fc6d 	bl	80009e0 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210a:	f7fe fc69 	bl	80009e0 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e1a8      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211c:	4b2b      	ldr	r3, [pc, #172]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002128:	4b28      	ldr	r3, [pc, #160]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4925      	ldr	r1, [pc, #148]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]
 800213c:	e015      	b.n	800216a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213e:	4b24      	ldr	r3, [pc, #144]	@ (80021d0 <HAL_RCC_OscConfig+0x244>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7fe fc4c 	bl	80009e0 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214c:	f7fe fc48 	bl	80009e0 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e187      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215e:	4b1b      	ldr	r3, [pc, #108]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d036      	beq.n	80021e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d016      	beq.n	80021ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217e:	4b15      	ldr	r3, [pc, #84]	@ (80021d4 <HAL_RCC_OscConfig+0x248>)
 8002180:	2201      	movs	r2, #1
 8002182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002184:	f7fe fc2c 	bl	80009e0 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800218c:	f7fe fc28 	bl	80009e0 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e167      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219e:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <HAL_RCC_OscConfig+0x240>)
 80021a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x200>
 80021aa:	e01b      	b.n	80021e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ac:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <HAL_RCC_OscConfig+0x248>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b2:	f7fe fc15 	bl	80009e0 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b8:	e00e      	b.n	80021d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ba:	f7fe fc11 	bl	80009e0 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d907      	bls.n	80021d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e150      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
 80021cc:	40023800 	.word	0x40023800
 80021d0:	42470000 	.word	0x42470000
 80021d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d8:	4b88      	ldr	r3, [pc, #544]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 80021da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1ea      	bne.n	80021ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8097 	beq.w	8002320 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f6:	4b81      	ldr	r3, [pc, #516]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10f      	bne.n	8002222 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	4b7d      	ldr	r3, [pc, #500]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	4a7c      	ldr	r2, [pc, #496]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002210:	6413      	str	r3, [r2, #64]	@ 0x40
 8002212:	4b7a      	ldr	r3, [pc, #488]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800221e:	2301      	movs	r3, #1
 8002220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002222:	4b77      	ldr	r3, [pc, #476]	@ (8002400 <HAL_RCC_OscConfig+0x474>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d118      	bne.n	8002260 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222e:	4b74      	ldr	r3, [pc, #464]	@ (8002400 <HAL_RCC_OscConfig+0x474>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a73      	ldr	r2, [pc, #460]	@ (8002400 <HAL_RCC_OscConfig+0x474>)
 8002234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223a:	f7fe fbd1 	bl	80009e0 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002242:	f7fe fbcd 	bl	80009e0 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e10c      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	4b6a      	ldr	r3, [pc, #424]	@ (8002400 <HAL_RCC_OscConfig+0x474>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x2ea>
 8002268:	4b64      	ldr	r3, [pc, #400]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 800226a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800226c:	4a63      	ldr	r2, [pc, #396]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6713      	str	r3, [r2, #112]	@ 0x70
 8002274:	e01c      	b.n	80022b0 <HAL_RCC_OscConfig+0x324>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b05      	cmp	r3, #5
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x30c>
 800227e:	4b5f      	ldr	r3, [pc, #380]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 8002280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002282:	4a5e      	ldr	r2, [pc, #376]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	6713      	str	r3, [r2, #112]	@ 0x70
 800228a:	4b5c      	ldr	r3, [pc, #368]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 800228c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800228e:	4a5b      	ldr	r2, [pc, #364]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	6713      	str	r3, [r2, #112]	@ 0x70
 8002296:	e00b      	b.n	80022b0 <HAL_RCC_OscConfig+0x324>
 8002298:	4b58      	ldr	r3, [pc, #352]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 800229a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800229c:	4a57      	ldr	r2, [pc, #348]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 800229e:	f023 0301 	bic.w	r3, r3, #1
 80022a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80022a4:	4b55      	ldr	r3, [pc, #340]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 80022a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a8:	4a54      	ldr	r2, [pc, #336]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 80022aa:	f023 0304 	bic.w	r3, r3, #4
 80022ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d015      	beq.n	80022e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b8:	f7fe fb92 	bl	80009e0 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022be:	e00a      	b.n	80022d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c0:	f7fe fb8e 	bl	80009e0 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e0cb      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d6:	4b49      	ldr	r3, [pc, #292]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0ee      	beq.n	80022c0 <HAL_RCC_OscConfig+0x334>
 80022e2:	e014      	b.n	800230e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e4:	f7fe fb7c 	bl	80009e0 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ec:	f7fe fb78 	bl	80009e0 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e0b5      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002302:	4b3e      	ldr	r3, [pc, #248]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1ee      	bne.n	80022ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800230e:	7dfb      	ldrb	r3, [r7, #23]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d105      	bne.n	8002320 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002314:	4b39      	ldr	r3, [pc, #228]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002318:	4a38      	ldr	r2, [pc, #224]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 800231a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800231e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 80a1 	beq.w	800246c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800232a:	4b34      	ldr	r3, [pc, #208]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	2b08      	cmp	r3, #8
 8002334:	d05c      	beq.n	80023f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d141      	bne.n	80023c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233e:	4b31      	ldr	r3, [pc, #196]	@ (8002404 <HAL_RCC_OscConfig+0x478>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002344:	f7fe fb4c 	bl	80009e0 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234c:	f7fe fb48 	bl	80009e0 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e087      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235e:	4b27      	ldr	r3, [pc, #156]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69da      	ldr	r2, [r3, #28]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002378:	019b      	lsls	r3, r3, #6
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002380:	085b      	lsrs	r3, r3, #1
 8002382:	3b01      	subs	r3, #1
 8002384:	041b      	lsls	r3, r3, #16
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238c:	061b      	lsls	r3, r3, #24
 800238e:	491b      	ldr	r1, [pc, #108]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 8002390:	4313      	orrs	r3, r2
 8002392:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002394:	4b1b      	ldr	r3, [pc, #108]	@ (8002404 <HAL_RCC_OscConfig+0x478>)
 8002396:	2201      	movs	r2, #1
 8002398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239a:	f7fe fb21 	bl	80009e0 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a2:	f7fe fb1d 	bl	80009e0 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e05c      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b4:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_OscConfig+0x416>
 80023c0:	e054      	b.n	800246c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c2:	4b10      	ldr	r3, [pc, #64]	@ (8002404 <HAL_RCC_OscConfig+0x478>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7fe fb0a 	bl	80009e0 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d0:	f7fe fb06 	bl	80009e0 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e045      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e2:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <HAL_RCC_OscConfig+0x470>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x444>
 80023ee:	e03d      	b.n	800246c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d107      	bne.n	8002408 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e038      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
 80023fc:	40023800 	.word	0x40023800
 8002400:	40007000 	.word	0x40007000
 8002404:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002408:	4b1b      	ldr	r3, [pc, #108]	@ (8002478 <HAL_RCC_OscConfig+0x4ec>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d028      	beq.n	8002468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d121      	bne.n	8002468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242e:	429a      	cmp	r2, r3
 8002430:	d11a      	bne.n	8002468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002438:	4013      	ands	r3, r2
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800243e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002440:	4293      	cmp	r3, r2
 8002442:	d111      	bne.n	8002468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244e:	085b      	lsrs	r3, r3, #1
 8002450:	3b01      	subs	r3, #1
 8002452:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002454:	429a      	cmp	r2, r3
 8002456:	d107      	bne.n	8002468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002462:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002464:	429a      	cmp	r2, r3
 8002466:	d001      	beq.n	800246c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800

0800247c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0cc      	b.n	800262a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002490:	4b68      	ldr	r3, [pc, #416]	@ (8002634 <HAL_RCC_ClockConfig+0x1b8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d90c      	bls.n	80024b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b65      	ldr	r3, [pc, #404]	@ (8002634 <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b63      	ldr	r3, [pc, #396]	@ (8002634 <HAL_RCC_ClockConfig+0x1b8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0b8      	b.n	800262a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d020      	beq.n	8002506 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d0:	4b59      	ldr	r3, [pc, #356]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4a58      	ldr	r2, [pc, #352]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e8:	4b53      	ldr	r3, [pc, #332]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	4a52      	ldr	r2, [pc, #328]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f4:	4b50      	ldr	r3, [pc, #320]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	494d      	ldr	r1, [pc, #308]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	4313      	orrs	r3, r2
 8002504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d044      	beq.n	800259c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d107      	bne.n	800252a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	4b47      	ldr	r3, [pc, #284]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d119      	bne.n	800255a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e07f      	b.n	800262a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d003      	beq.n	800253a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002536:	2b03      	cmp	r3, #3
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253a:	4b3f      	ldr	r3, [pc, #252]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e06f      	b.n	800262a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254a:	4b3b      	ldr	r3, [pc, #236]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e067      	b.n	800262a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800255a:	4b37      	ldr	r3, [pc, #220]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f023 0203 	bic.w	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4934      	ldr	r1, [pc, #208]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 8002568:	4313      	orrs	r3, r2
 800256a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800256c:	f7fe fa38 	bl	80009e0 <HAL_GetTick>
 8002570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002572:	e00a      	b.n	800258a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002574:	f7fe fa34 	bl	80009e0 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002582:	4293      	cmp	r3, r2
 8002584:	d901      	bls.n	800258a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e04f      	b.n	800262a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258a:	4b2b      	ldr	r3, [pc, #172]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 020c 	and.w	r2, r3, #12
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	429a      	cmp	r2, r3
 800259a:	d1eb      	bne.n	8002574 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800259c:	4b25      	ldr	r3, [pc, #148]	@ (8002634 <HAL_RCC_ClockConfig+0x1b8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d20c      	bcs.n	80025c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025aa:	4b22      	ldr	r3, [pc, #136]	@ (8002634 <HAL_RCC_ClockConfig+0x1b8>)
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b2:	4b20      	ldr	r3, [pc, #128]	@ (8002634 <HAL_RCC_ClockConfig+0x1b8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e032      	b.n	800262a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d0:	4b19      	ldr	r3, [pc, #100]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4916      	ldr	r1, [pc, #88]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ee:	4b12      	ldr	r3, [pc, #72]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	490e      	ldr	r1, [pc, #56]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002602:	f000 f821 	bl	8002648 <HAL_RCC_GetSysClockFreq>
 8002606:	4602      	mov	r2, r0
 8002608:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	490a      	ldr	r1, [pc, #40]	@ (800263c <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	5ccb      	ldrb	r3, [r1, r3]
 8002616:	fa22 f303 	lsr.w	r3, r2, r3
 800261a:	4a09      	ldr	r2, [pc, #36]	@ (8002640 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800261e:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <HAL_RCC_ClockConfig+0x1c8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe f998 	bl	8000958 <HAL_InitTick>

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40023c00 	.word	0x40023c00
 8002638:	40023800 	.word	0x40023800
 800263c:	08002884 	.word	0x08002884
 8002640:	20000000 	.word	0x20000000
 8002644:	20000004 	.word	0x20000004

08002648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800264c:	b090      	sub	sp, #64	@ 0x40
 800264e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002660:	4b59      	ldr	r3, [pc, #356]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 030c 	and.w	r3, r3, #12
 8002668:	2b08      	cmp	r3, #8
 800266a:	d00d      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0x40>
 800266c:	2b08      	cmp	r3, #8
 800266e:	f200 80a1 	bhi.w	80027b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_RCC_GetSysClockFreq+0x34>
 8002676:	2b04      	cmp	r3, #4
 8002678:	d003      	beq.n	8002682 <HAL_RCC_GetSysClockFreq+0x3a>
 800267a:	e09b      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800267c:	4b53      	ldr	r3, [pc, #332]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x184>)
 800267e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002680:	e09b      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002682:	4b53      	ldr	r3, [pc, #332]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002684:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002686:	e098      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002688:	4b4f      	ldr	r3, [pc, #316]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002690:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002692:	4b4d      	ldr	r3, [pc, #308]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d028      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269e:	4b4a      	ldr	r3, [pc, #296]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	099b      	lsrs	r3, r3, #6
 80026a4:	2200      	movs	r2, #0
 80026a6:	623b      	str	r3, [r7, #32]
 80026a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80026b0:	2100      	movs	r1, #0
 80026b2:	4b47      	ldr	r3, [pc, #284]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80026b4:	fb03 f201 	mul.w	r2, r3, r1
 80026b8:	2300      	movs	r3, #0
 80026ba:	fb00 f303 	mul.w	r3, r0, r3
 80026be:	4413      	add	r3, r2
 80026c0:	4a43      	ldr	r2, [pc, #268]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80026c2:	fba0 1202 	umull	r1, r2, r0, r2
 80026c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026c8:	460a      	mov	r2, r1
 80026ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80026cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026ce:	4413      	add	r3, r2
 80026d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026d4:	2200      	movs	r2, #0
 80026d6:	61bb      	str	r3, [r7, #24]
 80026d8:	61fa      	str	r2, [r7, #28]
 80026da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80026e2:	f7fd fd71 	bl	80001c8 <__aeabi_uldivmod>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4613      	mov	r3, r2
 80026ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026ee:	e053      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f0:	4b35      	ldr	r3, [pc, #212]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	099b      	lsrs	r3, r3, #6
 80026f6:	2200      	movs	r2, #0
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	617a      	str	r2, [r7, #20]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002702:	f04f 0b00 	mov.w	fp, #0
 8002706:	4652      	mov	r2, sl
 8002708:	465b      	mov	r3, fp
 800270a:	f04f 0000 	mov.w	r0, #0
 800270e:	f04f 0100 	mov.w	r1, #0
 8002712:	0159      	lsls	r1, r3, #5
 8002714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002718:	0150      	lsls	r0, r2, #5
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	ebb2 080a 	subs.w	r8, r2, sl
 8002722:	eb63 090b 	sbc.w	r9, r3, fp
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002732:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002736:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800273a:	ebb2 0408 	subs.w	r4, r2, r8
 800273e:	eb63 0509 	sbc.w	r5, r3, r9
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	00eb      	lsls	r3, r5, #3
 800274c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002750:	00e2      	lsls	r2, r4, #3
 8002752:	4614      	mov	r4, r2
 8002754:	461d      	mov	r5, r3
 8002756:	eb14 030a 	adds.w	r3, r4, sl
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	eb45 030b 	adc.w	r3, r5, fp
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800276e:	4629      	mov	r1, r5
 8002770:	028b      	lsls	r3, r1, #10
 8002772:	4621      	mov	r1, r4
 8002774:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002778:	4621      	mov	r1, r4
 800277a:	028a      	lsls	r2, r1, #10
 800277c:	4610      	mov	r0, r2
 800277e:	4619      	mov	r1, r3
 8002780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002782:	2200      	movs	r2, #0
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	60fa      	str	r2, [r7, #12]
 8002788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800278c:	f7fd fd1c 	bl	80001c8 <__aeabi_uldivmod>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4613      	mov	r3, r2
 8002796:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002798:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	0c1b      	lsrs	r3, r3, #16
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	3301      	adds	r3, #1
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80027a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027b2:	e002      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027b4:	4b05      	ldr	r3, [pc, #20]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x184>)
 80027b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3740      	adds	r7, #64	@ 0x40
 80027c0:	46bd      	mov	sp, r7
 80027c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027c6:	bf00      	nop
 80027c8:	40023800 	.word	0x40023800
 80027cc:	00f42400 	.word	0x00f42400
 80027d0:	017d7840 	.word	0x017d7840

080027d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d8:	4b03      	ldr	r3, [pc, #12]	@ (80027e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	20000000 	.word	0x20000000

080027ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027f0:	f7ff fff0 	bl	80027d4 <HAL_RCC_GetHCLKFreq>
 80027f4:	4602      	mov	r2, r0
 80027f6:	4b05      	ldr	r3, [pc, #20]	@ (800280c <HAL_RCC_GetPCLK1Freq+0x20>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	0a9b      	lsrs	r3, r3, #10
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	4903      	ldr	r1, [pc, #12]	@ (8002810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002802:	5ccb      	ldrb	r3, [r1, r3]
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002808:	4618      	mov	r0, r3
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40023800 	.word	0x40023800
 8002810:	08002894 	.word	0x08002894

08002814 <memset>:
 8002814:	4402      	add	r2, r0
 8002816:	4603      	mov	r3, r0
 8002818:	4293      	cmp	r3, r2
 800281a:	d100      	bne.n	800281e <memset+0xa>
 800281c:	4770      	bx	lr
 800281e:	f803 1b01 	strb.w	r1, [r3], #1
 8002822:	e7f9      	b.n	8002818 <memset+0x4>

08002824 <__libc_init_array>:
 8002824:	b570      	push	{r4, r5, r6, lr}
 8002826:	4d0d      	ldr	r5, [pc, #52]	@ (800285c <__libc_init_array+0x38>)
 8002828:	4c0d      	ldr	r4, [pc, #52]	@ (8002860 <__libc_init_array+0x3c>)
 800282a:	1b64      	subs	r4, r4, r5
 800282c:	10a4      	asrs	r4, r4, #2
 800282e:	2600      	movs	r6, #0
 8002830:	42a6      	cmp	r6, r4
 8002832:	d109      	bne.n	8002848 <__libc_init_array+0x24>
 8002834:	4d0b      	ldr	r5, [pc, #44]	@ (8002864 <__libc_init_array+0x40>)
 8002836:	4c0c      	ldr	r4, [pc, #48]	@ (8002868 <__libc_init_array+0x44>)
 8002838:	f000 f818 	bl	800286c <_init>
 800283c:	1b64      	subs	r4, r4, r5
 800283e:	10a4      	asrs	r4, r4, #2
 8002840:	2600      	movs	r6, #0
 8002842:	42a6      	cmp	r6, r4
 8002844:	d105      	bne.n	8002852 <__libc_init_array+0x2e>
 8002846:	bd70      	pop	{r4, r5, r6, pc}
 8002848:	f855 3b04 	ldr.w	r3, [r5], #4
 800284c:	4798      	blx	r3
 800284e:	3601      	adds	r6, #1
 8002850:	e7ee      	b.n	8002830 <__libc_init_array+0xc>
 8002852:	f855 3b04 	ldr.w	r3, [r5], #4
 8002856:	4798      	blx	r3
 8002858:	3601      	adds	r6, #1
 800285a:	e7f2      	b.n	8002842 <__libc_init_array+0x1e>
 800285c:	080028a4 	.word	0x080028a4
 8002860:	080028a4 	.word	0x080028a4
 8002864:	080028a4 	.word	0x080028a4
 8002868:	080028a8 	.word	0x080028a8

0800286c <_init>:
 800286c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286e:	bf00      	nop
 8002870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002872:	bc08      	pop	{r3}
 8002874:	469e      	mov	lr, r3
 8002876:	4770      	bx	lr

08002878 <_fini>:
 8002878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287a:	bf00      	nop
 800287c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800287e:	bc08      	pop	{r3}
 8002880:	469e      	mov	lr, r3
 8002882:	4770      	bx	lr
